substitutions:
  devicename: testnode
  upper_devicename: TestNode

# Enable logging
logger:

i2c:
  sda: D2
  scl: D1

output:
  - platform: gpio
    pin:
      number: D0
      inverted: True
    id: gpio_d0
light:
  - platform: binary
    name: "Desk Lamp"
    id: desk_lamp
    output: gpio_d0
    effects:
      - strobe:
sensor:
  - platform: dht
    pin: D3
    model: DHT22_TYPE2
    temperature:
      name: "Temp"
      id: temp
      unit_of_measurement: "°F"
      filters:
        - median: 
            window_size: 5
            send_every: 5
        - lambda: return x * (9.0/5.0) + 32.0;
    humidity:
      name: "Humid"
      id: humid
      filters:
        - median: 
            window_size: 5
            send_every: 5
    update_interval: 20s
  - platform: homeassistant
    name: "NWS Temperature"
    entity_id: sensor.kptw_temperature
    id: nws_temperature
    internal: true
  - platform: homeassistant
    name: "NWS Humidity"
    entity_id: sensor.kptw_humidity
    id: nws_humidity
    internal: true
text_sensor:
  - platform: homeassistant
    name: "NWS"
    entity_id: weather.kptw_daynight 
    id: nws
    internal: true

binary_sensor:
  - platform: gpio
    pin: D6
    name: "PIR Sensor"
    device_class: motion
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      then:
        - light.turn_on: desk_lamp
    on_release:
      then:
        - light.turn_off: desk_lamp

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    id: my_display
    pages:
      - id: page1
        lambda: |-
          it.print(0, 0, id(freeSans2), "Time");
          it.strftime(0, 20, id(freeSans2), "%a %b %d %Y", id(h_time).now());
          it.strftime(0, 40, id(freeSans), "%I:%M:%S %p", id(h_time).now());
      - id: page2
        lambda: |-
          it.print(0, 0, id(freeSans2), "Indoors");
          it.printf(0, 25, id(freeSans), "T: %.1f °F", id(temp).state);
          it.printf(0, 45, id(freeSans), "H: %.1f%%", id(humid).state);
      - id: page3
        lambda: |-
          it.print(0, 0, id(freeSans2), "Outdoors");
          it.print(0, 43, id(material_icons), TextAlign::BASELINE_LEFT, "\U000F050F");
          it.printf(20, 38, id(freeSans), "%.0f °F", id(nws_temperature).state);
          it.printf(0, 62, id(material_icons), TextAlign::BASELINE_LEFT, "\U000F058E");
          it.printf(20, 55, id(freeSans), "%.0f%%", id(nws_humidity).state);
          it.printf(0, 23, id(freeSans2), "%s", id(nws).state.c_str());

interval:
  - interval: 5s
    then:
      - display.page.show_next: my_display
      - component.update: my_display

font:
  - file: "fonts/FreeSans.ttf"
    id: freeSans
    size: 20
  - file: "fonts/FreeSans.ttf"
    id: freeSans2
    size: 10
  - file: 'fonts/materialIcons.ttf'
    id: material_icons
    size: 20
    glyphs:
      - "\U000F050F" # mdi-thermometer
      - "\U000F058E" # mdi-water-percent

time:
  - platform: homeassistant
    id: h_time

# spi:
#   clk_pin: D0
#   mosi_pin: D1

# display:
#   - platform: waveshare_epaper
#     cs_pin: D2
#     dc_pin: D5
#     busy_pin: D6
#     reset_pin: D7
#     model: 4.20in
#     update_interval: 60s
#     lambda: |-
#       it.strftime(0, 0, id(freeSans), "%a %b, %d %Y", id(h_time).now());
#       it.strftime(0, 20, id(freeSans), "%I:%M %p", id(h_time).now());
      
#       it.print(0, 75, id(freeSans2), "Outdoors");
#       it.printf(0, 100, id(freeSans), "T: %.0f °F", id(nws_temperature).state);
#       it.printf(0, 120, id(freeSans), "H: %.0f%%", id(nws_humidity).state);
#       it.printf(0, 140, id(freeSans), "%s", id(nws).state.c_str());

#       it.print(200, 0, id(freeSans2), "Indoors");
#       it.printf(180, 25, id(material_icons), TextAlign::BOTTOM_LEFT, "\U000F050F");
#       it.printf(200, 25, id(freeSans), "T: %.1f °F", id(temp).state);
#       it.printf(180, 45, id(material_icons), TextAlign::BASELINE_LEFT, "\U000F058E");
#       it.printf(200, 45, id(freeSans), "H: %.1f%%", id(humid).state);

<<: !include shared/esp8266.yaml
