substitutions:
  devicename: testnode2
  upper_devicename: TestNode2

# Enable logging
logger:

binary_sensor:
  - platform: status
    name: "TestNode2 Status"
  - platform: homeassistant
    entity_id: binary_sensor.garage_door_right
    id: garage_door_right
    internal: true

# deep_sleep:
#   run_duration: 15s
#   sleep_duration: 1min
#   id: deep_sleep_1

light:
  - platform: binary
    name: "OTA update mode"
    output: blue_led
    # on_turn_on:
    #   - deep_sleep.prevent: deep_sleep_1
    # on_turn_off:
    #   - deep_sleep.enter: deep_sleep_1

output:
  - platform: gpio
    pin: GPIO2
    id: blue_led

sensor:
  - platform: homeassistant
    name: "NWS Temperature"
    entity_id: sensor.kptw_temperature
    id: nws_temperature
    internal: true
  - platform: homeassistant
    name: "NWS Humidity"
    entity_id: sensor.kptw_humidity
    id: nws_humidity
    internal: true
  - platform: homeassistant
    entity_id: sensor.temp
    id: indoor_temp
    internal: true
  - platform: homeassistant
    entity_id: sensor.humid
    id: indoor_humidity
    internal: true
  - platform: homeassistant
    entity_id: sensor.garage_temperature
    id: garage_temp
    internal: true
  - platform: homeassistant
    entity_id: sensor.garage_humidity
    id: garage_humidity
    internal: true
  - platform: homeassistant
    entity_id: sensor.kptw_minmax
    id: nws_minmax
    internal: true
  - platform: dht
    pin: GPIO4
    model: DHT22_TYPE2
    temperature:
      name: "Temp"
      id: temp
      unit_of_measurement: "°F"
      filters:
        - median: 
            window_size: 5
            send_every: 5
        - lambda: return x * (9.0/5.0) + 32.0;
    humidity:
      name: "Humid"
      id: humid
      filters:
        - median: 
            window_size: 5
            send_every: 5
    update_interval: 20s
text_sensor:
  - platform: homeassistant
    name: "NWS"
    entity_id: weather.kptw_daynight 
    id: nws
    internal: true

font:
  - file: "fonts/FreeSans.ttf"
    id: freeSans_20
    size: 20
  - file: "fonts/FreeSans.ttf"
    id: freeSans_50
    size: 50
  - file: "fonts/FreeSans.ttf"
    id: freeSans_10
    size: 10
  - file: "fonts/FreeSans.ttf"
    id: freeSans_25
    size: 25
  - file: 'fonts/materialIcons.ttf'
    id: material_icons
    size: 50
    glyphs:
      - "\U000F0590" # weather-cloudy
      - "\U000F0F2F" # weather-cloudy-alert
      - "\U000F0E6E" # weather-cloudy-arrow-right
      - "\U000F0591" # weather-fog
      - "\U000F0592" # weather-hail
      - "\U000F0F30" # weather-hazy
      - "\U000F0898" # weather-hurricane
      - "\U000F0593" # weather-lightning
      - "\U000F067E" # weather-lightning-rainy
      - "\U000F0594" # weather-night
      - "\U000F0F31" # weather-night-partly-cloudy
      - "\U000F0595" # weather-partly-cloudy
      - "\U000F0F32" # weather-partly-lightning
      - "\U000F0F33" # weather-partly-rainy
      - "\U000F0F34" # weather-partly-snowy
      - "\U000F0F35" # weather-partly-snowy-rainy
      - "\U000F0596" # weather-pouring
      - "\U000F0597" # weather-rainy
      - "\U000F0598" # weather-snowy
      - "\U000F0F36" # weather-snowy-heavy
      - "\U000F067F" # weather-snowy-rainy
      - "\U000F0599" # weather-sunny
      - "\U000F0F37" # weather-sunny-alert
      - "\U000F14E4" # weather-sunny-off
      - "\U000F059A" # weather-sunset
      - "\U000F059B" # weather-sunset-down
      - "\U000F059C" # weather-sunset-up
      - "\U000F0F38" # weather-tornado
      - "\U000F059D" # weather-windy
      - "\U000F059E" # weather-windy-variant

time:
  - platform: homeassistant
    id: h_time

spi:
  clk_pin: GPIO19
  mosi_pin: GPIO21

display:
  - platform: waveshare_epaper
    cs_pin: GPIO18
    dc_pin: GPIO5
    busy_pin: GPIO23
    reset_pin: GPIO22
    model: 4.20in
    update_interval: 5min
    lambda: |-
      it.strftime(0, 18, id(freeSans_10), TextAlign::BOTTOM_LEFT, "Last updated: %I:%M %p", id(h_time).now());
      it.strftime(it.get_width(), 0, id(freeSans_20), TextAlign::TOP_RIGHT, "%a %b-%d-%Y", id(h_time).now());
      it.line(0, 20, it.get_width(), 20);

      it.printf(50, 25, id(freeSans_20), TextAlign::TOP_CENTER, "%s", id(nws).state.c_str());

      it.printf(100, 25, id(freeSans_50), TextAlign::TOP_LEFT, "%.0f°F", id(nws_temperature).state);
      it.printf(100, 80, id(freeSans_20), TextAlign::TOP_LEFT, "%.0f°F", id(nws_minmax).state);
      it.printf(220, 80, id(freeSans_20), TextAlign::TOP_RIGHT, "%.0f%%", id(nws_humidity).state);
      it.line(0, 100, it.get_width(), 100);

      it.line(250, 20, 250, it.get_height());
      it.printf((it.get_width() - 250) / 2 + 250, 22, id(freeSans_20), TextAlign::TOP_CENTER, "Indoors");
      it.printf(260, 60, id(freeSans_25), TextAlign::TOP_LEFT, "%.0f°F", id(indoor_temp).state);
      it.printf(it.get_width() - 10, 60, id(freeSans_25), TextAlign::TOP_RIGHT, "%.0f%%", id(indoor_humidity).state);

      it.printf((it.get_width() - 250) / 2 + 250, 102, id(freeSans_20), TextAlign::TOP_CENTER, "Garage");
      it.printf(260, 130, id(freeSans_20), TextAlign::TOP_LEFT, "Door:");
      it.printf(330, 130, id(freeSans_20), TextAlign::TOP_LEFT, "%s", id(garage_door_right).state ? "Open" : "Closed");
      it.printf(260, 160, id(freeSans_25), TextAlign::TOP_LEFT, "%.0f°F", id(garage_temp).state);
      it.printf(it.get_width() - 10, 160, id(freeSans_25), TextAlign::TOP_RIGHT, "%.0f%%", id(garage_humidity).state);

      if (id(nws).has_state()) {
        std::map<std::string, std::string> weather_state {
          {"cloudy", "\U000F0590"},
          {"cloudy-alert", "\U000F0F2F"},
          {"cloudy-arrow-right", "\U000F0E6E"},
          {"fog", "\U000F0591"},
          {"hail", "\U000F0592"},
          {"hazy", "\U000F0F30"},
          {"hurricane", "\U000F0898"},
          {"lightning", "\U000F0593"},
          {"lightning-rainy", "\U000F067E"},
          {"night", "\U000F0594"},
          {"clear-night", "\U000F0594"},
          {"night-partly-cloudy", "\U000F0F31"},
          {"partly-cloudy", "\U000F0595"},
          {"partly-lightning", "\U000F0F32"},
          {"partly-rainy", "\U000F0F33"},
          {"partly-snowy", "\U000F0F34"},
          {"partly-snowy-rainy", "\U000F0F35"},
          {"pouring", "\U000F0596"},
          {"rainy", "\U000F0597"},
          {"snowy", "\U000F0598"},
          {"snowy-heavy", "\U000F0F36"},
          {"snowy-rainy", "\U000F067F"},
          {"sunny", "\U000F0599"},
          {"sunny-alert", "\U000F0F37"},
          {"sunny-off", "\U000F14E4"},
          {"sunset", "\U000F059A"},
          {"sunset-down", "\U000F059B"},
          {"sunset-up", "\U000F059C"},
          {"tornado", "\U000F0F38"},
          {"windy", "\U000F059D"},
          {"windy-variant", "\U000F059E"},
        };
          it.printf(50, 50, id(material_icons), TextAlign::TOP_CENTER, weather_state[id(nws).state.c_str()].c_str());
      }

<<: !include shared/esp32.yaml
